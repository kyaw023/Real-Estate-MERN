import {
  __publicField
} from "./chunk-DC5AMYBS.js";

// node_modules/ldrs/dist/lib/LdrsBaseElement.js
var t = class extends HTMLElement {
  constructor() {
    super();
    __publicField(this, "_propsToUpgrade", {});
    __publicField(this, "shadow");
    __publicField(this, "template");
    __publicField(this, "defaultProps");
    __publicField(this, "isAttached", false);
    this.shadow = this.attachShadow({ mode: "open" }), this.template = document.createElement("template");
  }
  storePropsToUpgrade(t2) {
    t2.forEach((t3) => {
      this.hasOwnProperty(t3) && void 0 !== this[t3] && (this._propsToUpgrade[t3] = this[t3], delete this[t3]);
    });
  }
  upgradeStoredProps() {
    Object.entries(this._propsToUpgrade).forEach(([t2, e2]) => {
      this.setAttribute(t2, e2);
    });
  }
  reflect(t2) {
    t2.forEach((t3) => {
      Object.defineProperty(this, t3, { set(e2) {
        "string,number".includes(typeof e2) ? this.setAttribute(t3, e2.toString()) : this.removeAttribute(t3);
      }, get() {
        return this.getAttribute(t3);
      } });
    });
  }
  applyDefaultProps(t2) {
    this.defaultProps = t2, Object.entries(t2).forEach(([t3, e2]) => {
      this[t3] = this[t3] || e2.toString();
    });
  }
};

// node_modules/ldrs/dist/elements/square.js
var e = ":host{align-items:center;display:inline-flex;flex-shrink:0;height:var(--uib-size);justify-content:center;width:var(--uib-size)}:host([hidden]){display:none}.container{height:var(--uib-size);overflow:visible;transform-origin:center;width:var(--uib-size);will-change:transform}.car{stroke:var(--uib-color);stroke-dasharray:var(--uib-dash),var(--uib-gap);stroke-dashoffset:0;animation:travel var(--uib-speed) linear infinite;will-change:stroke-dasharray,stroke-dashoffset}.car,.track{fill:none;transition:stroke .5s ease}.track{stroke:var(--uib-color);opacity:var(--uib-bg-opacity)}@keyframes travel{0%{stroke-dashoffset:0}to{stroke-dashoffset:-100}}";
var s = class extends t {
  constructor() {
    super();
    __publicField(this, "_attributes", ["size", "color", "speed", "stroke", "stroke-length", "bg-opacity"]);
    __publicField(this, "size");
    __publicField(this, "color");
    __publicField(this, "speed");
    __publicField(this, "stroke");
    __publicField(this, "stroke-length");
    __publicField(this, "bg-opacity");
    this.storePropsToUpgrade(this._attributes), this.reflect(this._attributes);
  }
  static get observedAttributes() {
    return ["size", "color", "stroke", "stroke-length", "speed", "bg-opacity"];
  }
  connectedCallback() {
    this.upgradeStoredProps(), this.applyDefaultProps({ size: 35, color: "black", stroke: 5, "stroke-length": 0.25, speed: 1.2, "bg-opacity": 0.1 });
    const t2 = parseInt(this.size), s2 = parseInt(this.stroke), i2 = s2 / 2, r = Math.max(t2 - s2 / 2, 0);
    this.template.innerHTML = `
      <svg
        class="container"
        viewBox="0 0 ${this.size} ${this.size}"
        height="${this.size}"
        width="${this.size}"
      >
        <rect 
          class="track"
          x="${i2}" 
          y="${i2}" 
          fill="none" 
          stroke-width="${this.stroke}px" 
          width="${r}" 
          height="${r}"
        />
        <rect 
          class="car"
          x="${i2}" 
          y="${i2}" 
          fill="none" 
          stroke-width="${this.stroke}px" 
          width="${r}" 
          height="${r}"
          pathlength="100"
        />
      </svg>
      <style>
        :host{
          --uib-size: ${this.size}px;
          --uib-color: ${this.color};
          --uib-speed: ${this.speed}s;
          --uib-dash: ${100 * parseFloat(this["stroke-length"])};
          --uib-gap: ${100 - 100 * parseFloat(this["stroke-length"])};
          --uib-bg-opacity: ${this["bg-opacity"]};
        }
        ${e}
      </style>
    `, this.shadow.replaceChildren(this.template.content.cloneNode(true));
  }
  attributeChangedCallback() {
    const t2 = this.shadow.querySelector("style"), s2 = this.shadow.querySelector("svg"), i2 = this.shadow.querySelectorAll("rect");
    if (!t2) return;
    const r = parseInt(this.size), n = parseInt(this.stroke), o = String(n / 2), a = String(Math.max(r - n / 2, 0));
    s2.setAttribute("height", this.size), s2.setAttribute("width", this.size), s2.setAttribute("viewBox", `0 0 ${this.size} ${this.size}`), i2.forEach((t3) => {
      t3.setAttribute("stroke-width", this.stroke), t3.setAttribute("width", a), t3.setAttribute("height", a), t3.setAttribute("x", o), t3.setAttribute("y", o);
    }), t2.innerHTML = `
      :host{
        --uib-size: ${this.size}px;
        --uib-color: ${this.color};
        --uib-speed: ${this.speed}s;
        --uib-dash: ${100 * parseFloat(this["stroke-length"])};
        --uib-gap: ${100 - 100 * parseFloat(this["stroke-length"])};
        --uib-bg-opacity: ${this["bg-opacity"]};
      }
      ${e}
    `;
  }
};
var i = { register: (t2 = "l-square") => {
  customElements.get(t2) || customElements.define(t2, class extends s {
  });
}, element: s };

// node_modules/ldrs/dist/auto/square.js
i.register();
//# sourceMappingURL=ldrs_square.js.map
