{
  "version": 3,
  "sources": ["../../ldrs/temp-ts-out/lib/LdrsBaseElement.js", "../../ldrs/temp-ts-out/elements/square.js", "../../ldrs/temp-ts-out/auto/square.js"],
  "sourcesContent": ["export default class LdrsBaseElement extends HTMLElement {\n    _propsToUpgrade = {};\n    shadow;\n    template;\n    defaultProps;\n    isAttached = false;\n    constructor() {\n        super();\n        this.shadow = this.attachShadow({ mode: 'open' });\n        this.template = document.createElement('template');\n    }\n    storePropsToUpgrade(props) {\n        props.forEach((prop) => {\n            if (this.hasOwnProperty(prop) && typeof this[prop] !== 'undefined') {\n                this._propsToUpgrade[prop] = this[prop];\n                delete this[prop];\n            }\n        });\n    }\n    upgradeStoredProps() {\n        Object.entries(this._propsToUpgrade).forEach(([key, val]) => {\n            this.setAttribute(key, val);\n        });\n    }\n    reflect(props) {\n        props.forEach((prop) => {\n            Object.defineProperty(this, prop, {\n                set(val) {\n                    if ('string,number'.includes(typeof val)) {\n                        this.setAttribute(prop, val.toString());\n                    }\n                    else {\n                        this.removeAttribute(prop);\n                    }\n                },\n                get() {\n                    return this.getAttribute(prop);\n                },\n            });\n        });\n    }\n    applyDefaultProps(props) {\n        this.defaultProps = props;\n        Object.entries(props).forEach(([key, defaultValue]) => {\n            this[key] = this[key] || defaultValue.toString();\n        });\n    }\n}\n", "import Base from '../lib/LdrsBaseElement.js';\nimport styles from './square.scss';\nclass Square extends Base {\n    _attributes = [\n        'size',\n        'color',\n        'speed',\n        'stroke',\n        'stroke-length',\n        'bg-opacity',\n    ];\n    size;\n    color;\n    speed;\n    stroke;\n    'stroke-length';\n    'bg-opacity';\n    static get observedAttributes() {\n        return ['size', 'color', 'stroke', 'stroke-length', 'speed', 'bg-opacity'];\n    }\n    constructor() {\n        super();\n        this.storePropsToUpgrade(this._attributes);\n        this.reflect(this._attributes);\n    }\n    connectedCallback() {\n        this.upgradeStoredProps();\n        this.applyDefaultProps({\n            size: 35,\n            color: 'black',\n            stroke: 5,\n            'stroke-length': 0.25,\n            speed: 1.2,\n            'bg-opacity': 0.1,\n        });\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = strokeInt / 2;\n        const strokeAdjustedSize = Math.max(sizeInt - strokeInt / 2, 0);\n        this.template.innerHTML = `\n      <svg\n        class=\"container\"\n        viewBox=\"0 0 ${this.size} ${this.size}\"\n        height=\"${this.size}\"\n        width=\"${this.size}\"\n      >\n        <rect \n          class=\"track\"\n          x=\"${centerPoint}\" \n          y=\"${centerPoint}\" \n          fill=\"none\" \n          stroke-width=\"${this.stroke}px\" \n          width=\"${strokeAdjustedSize}\" \n          height=\"${strokeAdjustedSize}\"\n        />\n        <rect \n          class=\"car\"\n          x=\"${centerPoint}\" \n          y=\"${centerPoint}\" \n          fill=\"none\" \n          stroke-width=\"${this.stroke}px\" \n          width=\"${strokeAdjustedSize}\" \n          height=\"${strokeAdjustedSize}\"\n          pathlength=\"100\"\n        />\n      </svg>\n      <style>\n        :host{\n          --uib-size: ${this.size}px;\n          --uib-color: ${this.color};\n          --uib-speed: ${this.speed}s;\n          --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n          --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n          --uib-bg-opacity: ${this['bg-opacity']};\n        }\n        ${styles}\n      </style>\n    `;\n        this.shadow.replaceChildren(this.template.content.cloneNode(true));\n    }\n    attributeChangedCallback() {\n        const styleEl = this.shadow.querySelector('style');\n        const svgEl = this.shadow.querySelector('svg');\n        const squareEls = this.shadow.querySelectorAll('rect');\n        if (!styleEl)\n            return;\n        const sizeInt = parseInt(this.size);\n        const strokeInt = parseInt(this.stroke);\n        const centerPoint = String(strokeInt / 2);\n        const strokeAdjustedSize = String(Math.max(sizeInt - strokeInt / 2, 0));\n        svgEl.setAttribute('height', this.size);\n        svgEl.setAttribute('width', this.size);\n        svgEl.setAttribute('viewBox', `0 0 ${this.size} ${this.size}`);\n        squareEls.forEach((squareEl) => {\n            squareEl.setAttribute('stroke-width', this.stroke);\n            squareEl.setAttribute('width', strokeAdjustedSize);\n            squareEl.setAttribute('height', strokeAdjustedSize);\n            squareEl.setAttribute('x', centerPoint);\n            squareEl.setAttribute('y', centerPoint);\n        });\n        styleEl.innerHTML = `\n      :host{\n        --uib-size: ${this.size}px;\n        --uib-color: ${this.color};\n        --uib-speed: ${this.speed}s;\n        --uib-dash: ${parseFloat(this['stroke-length']) * 100};\n        --uib-gap: ${100 - parseFloat(this['stroke-length']) * 100};\n        --uib-bg-opacity: ${this['bg-opacity']};\n      }\n      ${styles}\n    `;\n    }\n}\nexport default {\n    register: (name = 'l-square') => {\n        if (!customElements.get(name)) {\n            customElements.define(name, class extends Square {\n            });\n        }\n    },\n    element: Square,\n};\n", "import square from '../elements/square.js';\nsquare.register();\n"],
  "mappings": "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",
  "names": ["LdrsBaseElement", "HTMLElement", "constructor", "super", "_propsToUpgrade", "shadow", "template", "defaultProps", "isAttached", "this", "attachShadow", "mode", "document", "createElement", "storePropsToUpgrade", "props", "forEach", "prop", "hasOwnProperty", "upgradeStoredProps", "Object", "entries", "key", "val", "setAttribute", "reflect", "defineProperty", "set", "includes", "toString", "removeAttribute", "get", "getAttribute", "applyDefaultProps", "defaultValue", "Square", "Base", "constructor", "super", "_attributes", "size", "color", "speed", "stroke", "this", "storePropsToUpgrade", "reflect", "observedAttributes", "connectedCallback", "upgradeStoredProps", "applyDefaultProps", "sizeInt", "parseInt", "strokeInt", "centerPoint", "strokeAdjustedSize", "Math", "max", "template", "innerHTML", "parseFloat", "styles", "shadow", "replaceChildren", "content", "cloneNode", "attributeChangedCallback", "styleEl", "querySelector", "svgEl", "squareEls", "querySelectorAll", "String", "setAttribute", "forEach", "squareEl", "square", "register", "name", "customElements", "get", "define", "element", "square", "register"]
}
